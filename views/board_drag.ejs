<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <!-- DevExtreme themes -->
        <link rel="stylesheet" href="\stylesheets\dx.common.css">
        <link rel="stylesheet" href="\stylesheets\dx.light.css">

        <title>Document</title>
        <style>
            #employees {
                max-height: 440px;
            }

            .dx-sortable-dragging {
                opacity: 0.9
            }

            .options {
                margin-top: 20px;
                padding: 20px;
                background-color: rgba(191, 191, 191, 0.15);
                position: relative;
            }

            .caption {
                font-size: 18px;
                font-weight: 500;
            }

            .option {
            margin-top: 10px;
            margin-right: 40px;
            display: inline-block;
            }

            .option:last-child {
                margin-right: 0;
            }
        </style>
    </head>
    <body class="dx-viewport">
        <div class="demo-container">
            <div class="form">
                <div class="dx-fieldset">    
                    <div class="dx-field">
                        <div class="dx-field-label">제목</div>
                        <div class="dx-field-value">
                            <div id="title"></div>
                        </div>
                    </div>    
                    <div class="dx-field">
                        <div class="dx-field-label">이름</div>
                        <div class="dx-field-value">
                            <div id="name"></div>
                        </div>
                    </div>
                </div>    
            </div>

            <div id="btnNew" class="validate"></div>
            <div id="btnChildNew" class="validate"></div>

            <div class="options"></div>
            
            <div id="tree-list-demo">
                <div id="bm_tree"></div>
            </div>

            <!-- <div class="options">
                <div class="caption">Options</div>
                <div class="option">
                    <div id="allowDropInside"></div>
                </div>
                <div class="option">
                    <div id="allowReordering"></div>
                </div>
                <div class="option">
                    <div id="dragIcons"></div>
                </div>
            </div> -->
        </div>
    </body>



        
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <!-- <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/quill/1.3.6/quill.min.js"></script> -->
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/quill/1.3.6/quill.min.js"></script>
    <!-- DevExtreme library -->
    <script type="text/javascript" src="/javascripts/dx.all.js"></script>

    <script>

        function BindData(){

            $.ajax({
                type: 'GET',
                url: '/api/callData',
                //  + '?page=' + pages + '&rowCount=' + rowcounts,
                dataType: "json"
                ,success: function(response) {
                    // respnse.data
                    var treeList = $("#bm_tree").dxTreeList({

                        // DevExtreme DxTreeList는 페이징을 지원하지 않음??
                        // 지원하는것으로 보여지는데 적용이 안됨
                        // 위쪽에 적용해야 적용되는것인지 확인 필요
                        
                        // 현재 적용 안됨
                        // paging: {
                        //     enabled: true,
                        //     pageSize: 10
                        // },
                        // pager: {
                        //     showPageSizeSelector: true,
                        //     allowedPageSizes: [10, 20, 50],
                        //     showNavigationButtons: true
                        // },
                        dataSource: response.data,
                        rootValue: 0,
                        keyExpr: "c_BM_IDs",
                        rowDragging: {
                            allowDropInsideItem: true,
                            allowReordering: true,
                            onDragChange: function(e) {
                                // 이동할 내역을 붙잡고 이동시 계속 발생
                                console.log('onDragChange');

                                var visibleRows = treeList.getVisibleRows(),
                                    sourceNode = treeList.getNodeByKey(e.itemData.c_BM_IDs),
                                    targetNode = visibleRows[e.toIndex].node;

                                while (targetNode && targetNode.data) {
                                    if (targetNode.data.c_BM_IDs === sourceNode.data.c_BM_IDs) {
                                        e.cancel = true;
                                        break;
                                    } else {}

                                    targetNode = targetNode.parent;
                                }
                            },
                            onReorder: function(e) {
                                // 이동이 끝난경우 발생
                                console.log('onReorder');

                                // sourceData 는 이동한 본인
                                // targetData 는 이동 되려는 곳, 즉 부모

                                var visibleRows = e.component.getVisibleRows(),
                                    sourceData = e.itemData,
                                    targetData = visibleRows[e.toIndex].data;

                                    //console.log(" org id : " + sourceData.orgLoIDs);
                                if (e.dropInsideItem) {
                                    // 부모가 없다가 있는 경우, 즉 누군가의 하위로 들어가는 경우
                                    e.itemData.c_BM_UpIDs = targetData.c_BM_IDs;
                                    // UpIDs를 바꿔준다.
                                } else {
                                    // 부모가 있어도 부모가 바뀌는 경우도 동작 함
                                    var sourceIndex = response.data.indexOf(sourceData),
                                        targetIndex = response.data.indexOf(targetData);

                                    if (sourceData.c_BM_UpIDs !== targetData.c_BM_UpIDs) {
                                        sourceData.c_BM_UpIDs = targetData.c_BM_UpIDs;
                                        if (e.toIndex > e.fromIndex) {
                                            targetIndex++;
                                        } else {}
                                    } else {}


                                    response.data.splice(sourceIndex, 1);
                                    response.data.splice(targetIndex, 0, sourceData);
                                }

                                // BM_UpIDs 가 해당 내용인걸 파악해본다.
                                // sourceData.c_BM_UpIDs 가 같은 아이들을 찾는다.
                                
                                // 우선 부모를 찾고 그다음에 자식들을 찾아야 하나?
                                // 그냥 sourceData 가지고 진행해야 하나?

                                // 내용은 좀 더 찾아볼 것
                                // 위치가 바뀐 내용을 가져옴
                                var updateArray = response.data.filter(function (n) {
                                    return n.c_BM_UpIDs == sourceData.c_BM_UpIDs;
                                });

                                var orderArray = response.data.filter(function (n) {
                                    return n.c_BM_UpIDs == sourceData.c_BM_UpIDs;
                                });

                                function customSort(a, b) 
                                { 
                                    if(a.c_BM_LoIDs == b.c_BM_LoIDs)
                                    { 
                                        return 0;
                                    } else{}

                                    return a.c_BM_LoIDs < b.c_BM_LoIDs ? 1 : -1; 
                                } 
                                
                                orderArray = orderArray.sort(customSort);

                                // 값 복사 방식이 Value 가 아닌 Reference로 보여짐
                                // order 한 내역을 다시 세팅한다.

                                var orderComArray = {};

                                for(i=0; i<orderArray.length; i++) {
                                    orderComArray[i] = orderArray[i].c_BM_LoIDs;
                                }
                                
                                //var updateData = "[";

                                for(i=0; i<updateArray.length; i++) {

                                    console.log("i Data : " + i);
                                    console.log("Begin Data : " + updateArray[i].c_BM_LoIDs);
                                    console.log("Update Data : " + orderComArray[i]);
                                    
                                    // 값을 바꾸면 orderArray가 이상하게 바뀜
                                    // 아마 근본 값을 바꾸어서 이렇게 되는것으로 보여짐
                                    updateArray[i].c_BM_LoIDs = orderComArray[i];

                                    //updateData += "{BM_IDs:" + updateArray[i].c_BM_IDs + ", BM_UpIDs:" +  updateArray[i].c_BM_UpIDs + ", BM_LoIDs:" + orderComArray[i] + "},";

                                    console.log("Complete Data : " + updateArray[i].c_BM_LoIDs);
                                }

                                //
                                // updateData = updateData.slice(0,-1);
                                // updateData += "]";

                                $.ajax({
                                    type: 'POST',
                                    url: '/api/updateData',
                                    data: {data: JSON.stringify(updateArray)},
                                    //  + '?page=' + pages + '&rowCount=' + rowcounts,
                                    dataType: "json"
                                    ,success: function(respnse) {
                                        RefreshData();
                                    }
                                });

                                // treeList.filter("value", "=", sourceData.c_BM_UpIDs);
                                

                                //var nodes = $("#bm_tree").dxTreeList("instance").

                                //RefreshData();
                            }
                        },
                        parentIdExpr: "c_BM_UpIDs",
                        columns: [
                                    "c_BM_IDs", 
                                    "c_Grp_M_IDs",
                                    "c_BM_UpIDs", 
                                    {
                                        dataField: "c_BM_LoIDs",
                                        caption: "c_BM_LoIDs",
                                        selectedFilterOperation: "contains"
                                    }, 
                                    "c_Lv", 
                                    {
                                        dataField: "c_BM_Name",
                                        caption: "c_BM_Name",
                                        selectedFilterOperation: "contains"
                                    },
                                    "c_Sort_BM_IDs",
                                    "orgUpIDs",
                                    "orgLoIDs"
                                ],
                        expandedRowKeys: [1],
                        filterRow: {
                            visible: true,
                            applyFilter: "auto"
                        },
                        selection: {
                            mode: "single" // or "multiple" | "none"
                        },
                        sorting: {
                            mode: "none" // or "multiple" | "none"
                        },
                        autoExpandAll:true,
                        showRowLines: true,
                        showBorders: true,
                        columnAutoWidth: true
                    }).dxTreeList("instance");
                    
                    // $("#bm_tree").dxTreeList("instance").expandAll();

                }
            });
        }

        // 20.11.06 us.Kim
        // 메소드 하나로 묶는법 찾아볼 것
        // 이미 만들어져 있는 상태에서는 auto Expand 가 안되서 삭제하고 다시 만들어 줘야 하는데
        // dxTreeList 가 있는지 없는지를 확인해야 함 
        // 이렇게 구현한건 코드 중복을 줄이기 위해서
        // 다음과 같은 경우 Ajax 실패 시 데이터가 아예 안보이게 됨 ( 이전것도 사라짐 )
        function RefreshData(){

            $("#bm_tree").dxTreeList("dispose");

            BindData();
        }

        function AddBoard(upIDs, title) {
            $.ajax({
                type: 'POST',
                url: '/api/addData',
                data: {pUpIDs:upIDs,pTitle:title},
                //  + '?page=' + pages + '&rowCount=' + rowcounts,
                dataType: "json"
                ,success: function(respnse) {
                    RefreshData();
                }
            });
        }

        $(function() {
            $("#title").dxTextBox({
                disabled: false
            });
            
            $("#name").dxTextBox({
                disabled: false
            });
            
            $("#btnNew").dxButton({
                text: "새글 만들기",
                type: "default",
                onClick: function (e) {

                    //alert($("#bm_tree").dxTreeList.selectedRowKeys);

                    // all 로 해도 Single이니까 상관없다.
                    // var upIds = $("#bm_tree").dxTreeList("instance").getSelectedRowKeys("all");
                    
                    // if(upIds == "") {
                    //     upIds = 0;
                    // } else {}

                    AddBoard(0, $('#title').dxTextBox('instance').option('value'));

                    //alert(upIds);

                    // var tree = $("#bm_tree").dxTreeList("instance");  
                }
            });

            $("#btnChildNew").dxButton({
                text: "리플 만들기",
                type: "default",
                onClick: function (e) {

                    //alert($("#bm_tree").dxTreeList.selectedRowKeys);

                    // all 로 해도 Single이니까 상관없다.
                    var upIds = $("#bm_tree").dxTreeList("instance").getSelectedRowKeys("all");
                    
                    if(upIds == "") {
                        alert("부모가 될 게시글을 선택해주세요.");
                        return;
                    } else {}

                    AddBoard(upIds, $('#title').dxTextBox('instance').option('value'));

                    //alert(upIds);

                    // var tree = $("#bm_tree").dxTreeList("instance");  
                }
            });


            // onLoad에서 사용하는것과 같은 동작
            BindData();

            // $("#allowDropInside").dxCheckBox({
            //     text: "Allow Drop Inside Item",
            //     value: true,
            //     onValueChanged: function(e) {
            //         treeList.option("rowDragging.allowDropInsideItem", e.value);
            //     }
            // });

            // $("#allowReordering").dxCheckBox({
            //     text: "Allow Reordering",
            //     value: true,
            //     onValueChanged: function(e) {
            //         treeList.option("rowDragging.allowReordering", e.value);
            //     }
            // });

            // $("#dragIcons").dxCheckBox({
            //     text: "Show Drag Icons",
            //     value: true,
            //     onValueChanged: function(e) {
            //         treeList.option("rowDragging.showDragIcons", e.value);
            //     }
            // });



        });
    </script>
</html>